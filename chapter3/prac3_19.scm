(define (element-in? set item)
 (cond ((null? set) #f)
	   ((eq? (car set) item) #t)
	   (else (element-in? (cdr set) item))))

(define (last-pair x)
 (if (not (pair? (cdr x)))
	 x
	 (last-pair (cdr x))))

(define (make-cycle x)
 (set-cdr! (last-pair x) x))

(define (loop? x)
 (define (loop?-iter a b)
  (cond ((or (null? a) (null? b)) #f)
		((or (not (pair? a)) (not (pair? b))) #f)
		((eq? (car a) (car b)) #t)
		((null? (cdr b)) #f)
		(else (loop?-iter (cdr a) (cddr b)))))
 (if (not (pair? x))
	#f
	(loop?-iter x (cdr x))
 ))

(define cycle-list (list 1 2 3))
(define cycle-list2 (list 1))
(define cycle-list3 ())
(newline)
(display (loop? cycle-list))
(newline)
(display (loop? cycle-list2))
(newline)
(display (loop? cycle-list3))
(make-cycle cycle-list)
(make-cycle cycle-list2)
(newline)
(display (loop? cycle-list))
(newline)
(display (loop? cycle-list2))
(newline)
(display (loop? cycle-list3))
(newline)
