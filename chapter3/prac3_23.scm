(define (make-deque)
 (cons () ()))
(define (empty-deque? deque)
 (null? (front-deque deque)))
(define (front-deque deque)
 (car deque))
(define (rear-deque deque)
 (cdr deque))
(define (front-insert-deque! deque item)
 (let ((new-pair (cons item ())))
	  (cond ((empty-deque? deque) 
			 (set-car! deque new-pair)
			 (set-cdr! deque new-pair)
			 deque)
			(else
			 (set-cdr! new-pair (front-deque deque))
			 (set-car! deque new-pair)
			 deque))))
(define (rear-insert-deque! deque item)
 (let ((new-pair (cons item ())))
	  (cond ((empty-deque? deque)
			 (set-car! deque new-pair)
			 (set-cdr! deque new-pair)
			 deque)
			(else
			 (set-cdr! (rear-deque deque) new-pair)
			 (set-cdr! deque new-pair)
			 deque))))
(define (front-delete-deque! deque)
		(cond ((empty-deque? deque)
			   (error "DELETE -- called with an empty queue" deque))
			  (else
			   (set-car! deque (cdr (front-deque deque)))
			   deque)))
;(define (rear-delete-deque!))

(define dq (make-deque))
(front-insert-deque! dq 1)
(front-insert-deque! dq 2)
(rear-insert-deque! dq 3)
(front-delete-deque! dq)
(newline)
(display dq)
(newline)
