(define (element-of-set? x set)
 (cond  ((null? set) #f)
		((< x (car set)) #f)
		((= x (car set)) #t)
		(else (element-of-set? x (cdr set)))))
(define (adjoin-set x set)
 ())

(define (adjoin-set x set)
 (define (adjoin-set-iter prev x post)
  (cond ((null? post) (append prev (list x)))
		((< x (car post)) (append prev (list x) post))
		(else (adjoin-set-iter (append prev (list (car post))) x (cdr post)))))
 (if (element-of-set? x set)
	 set
	 (adjoin-set-iter () x set))
 )

(define (intersection-set set1 set2)
 (cond  ((or (null? set1) (null? set2)) ())
		((< (car set1) (car set2)) (intersection-set (cdr set1) set2))
		((< (car set2) (car set1)) (intersection-set set1 (cdr set2)))
		(else (cons (car set1) (intersection-set (cdr set1) (cdr set2))))))

(define (union-set set1 set2)
 (cond  ((null? set1) set2)
		((null? set2) set1)
		((= (car set1) (car set2)) (cons (car set1) (union-set (cdr set1) (cdr set2))))
		((< (car set1) (car set2)) (cons (car set1) (union-set (cdr set1) set2)))
		((> (car set1) (car set2)) (cons (car set2) (union-set set1 (cdr set2))))
		))
(display (element-of-set? 1 (list 1 2 3)))
(newline)
(display (element-of-set? 3 (list 1 3 5 6)))
(newline)
(display (element-of-set? 4 (list 1 3 5 6)))
(newline)
(display (element-of-set? 4 (list 1 2 3)))
(newline)
(display (adjoin-set 1 (list 2 3 4)))
(newline)
(display (adjoin-set 4 (list 1 2 5)))
(newline)
(display (adjoin-set 3 (list 1 3 4)))
(newline)
(display (adjoin-set 5 (list 1 3 4)))
(newline)
(display (adjoin-set 5 (list 1 3 5)))
(newline)
(display (intersection-set (list 1 2 3 4 5) (list 2 3 4 5 6 7)))
(newline)
(display (intersection-set (list 1 2 3 4 5) (list 6)))
(newline)
(display (intersection-set (list 3 4 7 8) (list 2 4 6 7)))
(newline)
(display (union-set (list 1 2 3 4 5) (list 2 3 4 5 6 7)))
(newline)
(display (union-set (list 1 2 3 4 5) (list 6)))
(newline)
(display (union-set (list 3 4 7 8) (list 2 4 6 7)))
(newline)
