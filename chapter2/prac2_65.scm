(define (element-of-set? x set)
 (cond  ((null? set) #f)
		((< x (car set)) #f)
		((= x (car set)) #t)
		(else (element-of-set? x (cdr set)))))
(define (adjoin-set x set)
 ())

(define (intersection-set set1 set2)
 (cond  ((or (null? set1) (null? set2)) ())
		((< (car set1) (car set2)) (intersection-set (cdr set1) set2))
		((< (car set2) (car set1)) (intersection-set set1 (cdr set2)))
		(else (cons (car set1) (intersection-set (cdr set1) (cdr set2))))))

(define (union-set set1 set2)
 (cond  ((null? set1) set2)
		((null? set2) set1)
		((= (car set1) (car set2)) (cons (car set1) (union-set (cdr set1) (cdr set2))))
		((< (car set1) (car set2)) (cons (car set1) (union-set (cdr set1) set2)))
		((> (car set1) (car set2)) (cons (car set2) (union-set set1 (cdr set2))))
		))


(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
 (list entry left right))
(define (element-of-set? x set)
 (cond ((null? set) #f)
	   ((= x (entry set)) #t)
	   ((< x (entry set)) (element-of-set? x (left-branch set)))
	   ((> x (entry set)) (element-of-set? x (right-branch set)))
 )
 )

(define (adjoin-tree x set)
 (cond ((null? set) (make-tree x () ()))
	   ((< x (entry set)) (list (entry set) (adjoin-tree x (left-branch set)) (right-branch set)))
	   ((> x (entry set)) (list (entry set) (left-branch set) (adjoin-tree x (right-branch set))))
	   ((= x (entry set)) (entry set))))


(define (list->tree elements)
 (car (partial-tree elements (length elements)))
 )

(define (tree->list tree)
 (if (null? tree)
	 ()
	 (append (tree->list (left-branch tree)) 
			 (cons (entry tree) (tree->list (right-branch tree))))))


(define (partial-tree elts n)
 (if (= n 0)
	 (cons () elts)
	 (let ((left-size (quotient (- n 1) 2)))
	  (let ((left-result (partial-tree elts left-size)))
	   (let ((left-tree (car left-result))
			 (non-left-elts (cdr left-result))
			 (right-size (- n (+ left-size 1))))
		(let ((this-entry (car non-left-elts))
			   (right-result (partial-tree (cdr non-left-elts) right-size)))
		 (let ((right-tree (car right-result))
			   (remaining-elts (cdr right-result)))
		  (cons (make-tree this-entry left-tree right-tree) remaining-elts))
		 ))))))

(define (intersection-tree tree1 tree2)
 (list->tree (intersection-set (tree->list tree1) (tree->list tree2))))

(define (union-tree tree1 tree2)
 (list->tree (union-set (tree->list tree1) (tree->list tree2))))

(define tree1 (list->tree (list 1 2 3 4 5 6 7)))
(define tree2 (list->tree (list 3 4 5 6 7 8 9)))

(newline)
(display (list->tree (list 1 2 3 4 5 6 7)))
(newline)
(display (list->tree (list 3 4 5 6 7 8 9)))
(newline)
(display (union-tree tree1 tree2))
(newline)
(display (intersection-tree tree1 tree2))
(newline)


