(define (make-leaf symbol weight)
 (list 'leaf symbol weight))

(define (leaf? object)
 (eq? (car object) 'leaf))

(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))

(define (make-code-tree left right)
 (list left right (append (symbols left) (symbols right))
  (+ (weight left) (weight right))))

(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
 (if (leaf? tree)
	 (list (symbol-leaf tree))
	 (caddr tree)))
(define (weight tree)
 (if (leaf? tree)
	 (weight-leaf tree)
	 (cadddr tree)))

(define (decode bits tree)
 (define (decode-1 bits current-branch)
  (if (null? bits)
	  ()
	  (let ((next-branch
			 (choose-branch (car bits) current-branch)))
	   (if (leaf? next-branch)
		   (cons (symbol-leaf next-branch)
				 (decode-1 (cdr bits) tree))
		   (decode-1 (cdr bits) next-branch)))))
 (decode-1 bits tree))

(define (choose-branch bit branch)
 (cond ((= bit 0) (left-branch branch))
	   ((= bit 1) (right-branch branch))
	   (else (error "bad bit -- CHOOSE-BRANCH" bit))))

(define (adjoin-set x set)
 (cond ((null? set) (list x))
	   ((< (weight x) (weight (car set))) (cons x set))
	   (else (cons (car set) (adjoin-set x (cdr set))))))

(define (make-leaf-set pairs)
 (if (null? pairs)
	 ()
	 (let ((pair (car pairs)))
		  (adjoin-set (make-leaf (car pair) (cadr pair)) (make-leaf-set (cdr pairs)))))
)

(define sample-tree
 (make-code-tree (make-leaf 'A 4)
				 (make-code-tree
				  (make-leaf 'B 2)
				  (make-code-tree (make-leaf 'D 1)
								  (make-leaf 'C 1)))))
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))

(define (element-set? x set)
 (cond ((null? set) #f)
	   ((equal? x (car set)) #t)
	   (else (element-set? x (cdr set)))))

(define (encode-symbol symbol tree)
 (cond ((null? tree) (error "invalid tree"))
	   ((leaf? tree) ())
	   (else (cond ((element-set? symbol (symbols (left-branch tree)))
					(cons 0 (encode-symbol symbol (left-branch tree))))
				   ((element-set? symbol (symbols (right-branch tree)))
					(cons 1 (encode-symbol symbol (right-branch tree))))
				   (else (error "no such symbol"))))
	))

(define (encode message tree)
 (if (null? message)
	 ()
	 (append (encode-symbol (car message) tree)
			 (encode (cdr message) tree))))

(define (generate-huffman-tree pairs)
 (define (successive-merge sorted-leaf-set)
  (cond ((null? sorted-leaf-set) (error "invalid sorted-leaf-set"))
		((= (length sorted-leaf-set) 1) (car sorted-leaf-set))
		(else (let ((smallest-1 (car sorted-leaf-set))
					(smallest-2 (cadr sorted-leaf-set)))
				   (let ((merged-node (make-code-tree smallest-1 smallest-2)))
						(successive-merge (adjoin-set merged-node (cddr sorted-leaf-set))))))))
 (successive-merge (make-leaf-set pairs)))
(define symbol-seq (list (list 'A 4) (list 'B 2) (list 'C 1) (list 'D 1)))

(newline)
(display (decode sample-message sample-tree))
(newline)
(display (encode '(a d a b b c a) sample-tree))
(newline)
(display sample-tree)
(newline)
(display (generate-huffman-tree symbol-seq))
(newline)
