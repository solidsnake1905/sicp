!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
a	ration.scm	/^(define a (make-rat 2 -6))$/;"	f
a	symbol.scm	/^(define a 1)$/;"	f
accumulate	accumulate.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	enumerate.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	flatmap.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	permutation.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	prac2_33.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	prac2_34.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	prac2_35.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	prac2_36.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	prac2_37.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	prac2_40.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	prac2_41.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	prac2_42.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate-n	prac2_36.scm	/^(define (accumulate-n op init seqs)$/;"	f
accumulate-n	prac2_37.scm	/^(define (accumulate-n op init seqs)$/;"	f
add	prac2_6.scm	/^(define (add m n) (lambda (f) (lambda (x) ((m f) ((n f) x)))))$/;"	f
add-1	prac2_6.scm	/^(define (add-1 n)$/;"	f
add-rat	ration.scm	/^(define (add-rat x y)$/;"	f
addend	symbol-deriv.scm	/^(define (addend e) (car (cdr e)))$/;"	f
adjoin-position	prac2_42.scm	/^(define (adjoin-position row col rest-of-queens) (cons (list row col) rest-of-queens))$/;"	f
append-custom	list.scm	/^(define (append-custom list1 list2)$/;"	f
append-custom	prac2_33.scm	/^(define (append-custom seq1 seq2)$/;"	f
augend	symbol-deriv.scm	/^(define (augend e) (cadr (cdr e)))$/;"	f
b	ration.scm	/^(define b (make-rat 1 5))$/;"	f
b	symbol.scm	/^(define b 2)$/;"	f
branch-length	prac2_29.scm	/^(define (branch-length x)$/;"	f
branch-structure	prac2_29.scm	/^(define (branch-structure x)$/;"	f
careg	prac2_4.scm	/^(define (careg z)$/;"	f
careg	prac2_5.scm	/^(define (careg z)$/;"	f
cc	prac2_19.scm	/^(define (cc amount coin-values)$/;"	f
cdreg	prac2_4.scm	/^(define (cdreg z)$/;"	f
cdreg	prac2_5.scm	/^(define (cdreg z)$/;"	f
construct	prac2_4.scm	/^(define (construct x y)$/;"	f
construct	prac2_5.scm	/^(define (construct x y)$/;"	f
count-leaves	count_leaves.scm	/^(define (count-leaves items)$/;"	f
count-leaves	prac2_35.scm	/^(define (count-leaves t)$/;"	f
deep-reverse	prac2_27.scm	/^(define (deep-reverse tree)$/;"	f
denom	ration.scm	/^(define (denom x) (cdr x))$/;"	f
deriv	symbol-deriv.scm	/^(define (deriv expr var)$/;"	f
div-rat	ration.scm	/^(define (div-rat x y)$/;"	f
dot-product	prac2_37.scm	/^(define (dot-product v w)$/;"	f
empty-board	prac2_42.scm	/^(define empty-board ())$/;"	f
enumerate-interval	enumerate.scm	/^(define (enumerate-interval low high)$/;"	f
enumerate-interval	flatmap.scm	/^(define (enumerate-interval i j)$/;"	f
enumerate-interval	prac2_40.scm	/^(define (enumerate-interval i j)$/;"	f
enumerate-interval	prac2_41.scm	/^(define (enumerate-interval i j)$/;"	f
enumerate-interval	prac2_42.scm	/^(define (enumerate-interval i j)$/;"	f
enumerate-tree	enumerate.scm	/^(define (enumerate-tree tree)$/;"	f
equal-custom?	prac2_54.scm	/^(define (equal-custom? list1 list2)$/;"	f
equal-rat?	ration.scm	/^(define (equal-rat? x y)$/;"	f
except-first-denomination	prac2_19.scm	/^(define (except-first-denomination coins)$/;"	f
exclude-first-leaf	prac2_28.scm	/^(define (exclude-first-leaf tree)$/;"	f
filter	enumerate.scm	/^(define (filter predicate sequence)$/;"	f
filter	flatmap.scm	/^(define (filter predicate seq)$/;"	f
filter	prac2_40.scm	/^(define (filter predicate seq)$/;"	f
filter	prac2_41.scm	/^(define (filter predicate seq)$/;"	f
filter	prac2_42.scm	/^(define (filter predicate seq)$/;"	f
first-denomination	prac2_19.scm	/^(define (first-denomination coins)$/;"	f
first-leaf	prac2_28.scm	/^(define (first-leaf tree)$/;"	f
flatmap	flatmap.scm	/^(define (flatmap proc seq)$/;"	f
flatmap	permutation.scm	/^(define (flatmap proc seq)$/;"	f
flatmap	prac2_40.scm	/^(define (flatmap proc seq)$/;"	f
flatmap	prac2_41.scm	/^(define (flatmap proc seq)$/;"	f
flatmap	prac2_42.scm	/^(define (flatmap proc seq)$/;"	f
fold-left	prac2_38.scm	/^(define (fold-left op initial sequence)$/;"	f
fold-left	prac2_39.scm	/^(define (fold-left op initial sequence)$/;"	f
fold-right	prac2_38.scm	/^(define (fold-right op initial sequence)$/;"	f
fold-right	prac2_39.scm	/^(define (fold-right op initial sequence)$/;"	f
for-each-custom	prac2_23.scm	/^(define (for-each-custom f items)$/;"	f
fringe	prac2_28.scm	/^(define (fringe tree)$/;"	f
generate	flatmap.scm	/^(define generate (lambda (i) (map (lambda (j) (list i j)) (enumerate-interval 1 (- i 1)))))$/;"	f
generate	prac2_40.scm	/^(define generate (lambda (i) (map (lambda (j) (list i j)) (enumerate-interval 1 (- i 1)))))$/;"	f
generate-diff	prac2_41.scm	/^(define (generate-diff s n)$/;"	f
half	prac2_4.scm	/^(define half (construct 1 2))$/;"	f
horner-eval	prac2_34.scm	/^(define (horner-eval x coefficient-sequence)$/;"	f
inc	prac2_6.scm	/^(define (inc x) (+ 1 x))$/;"	f
last-pair	prac2_17.scm	/^(define (last-pair items)$/;"	f
left	prac2_29.scm	/^(define left (make-branch 4 3))$/;"	f
left-branch	prac2_29.scm	/^(define (left-branch x)$/;"	f
length-custom	list.scm	/^(define (length-custom items)$/;"	f
length-custom	prac2_33.scm	/^(define (length-custom sequence)$/;"	f
length-custom2	list.scm	/^(define (length-custom2 items)$/;"	f
list-ref-custom	list.scm	/^(define (list-ref-custom items n)$/;"	f
make-branch	prac2_29.scm	/^(define (make-branch _length structure)$/;"	f
make-mobile	prac2_29.scm	/^(define (make-mobile left right)$/;"	f
make-pair-sum	flatmap.scm	/^(define (make-pair-sum pair)$/;"	f
make-pair-sum	prac2_40.scm	/^(define (make-pair-sum pair)$/;"	f
make-product	symbol-deriv.scm	/^(define (make-product a1 a2)$/;"	f
make-rat	ration.scm	/^(define (make-rat n d)$/;"	f
make-sum	symbol-deriv.scm	/^(define (make-sum a1 a2) $/;"	f
map-custom	prac2_33.scm	/^(define (map-custom p sequence)$/;"	f
mat1	prac2_37.scm	/^(define mat1 (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12)))$/;"	f
mat2	prac2_37.scm	/^(define mat2 (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))$/;"	f
matrix-*-matrix	prac2_37.scm	/^(define (matrix-*-matrix m n)$/;"	f
matrix-*-vector	prac2_37.scm	/^(define (matrix-*-vector m v)$/;"	f
memq-custom	memq.scm	/^(define (memq-custom item x)$/;"	f
mul-rat	ration.scm	/^(define (mul-rat x y)$/;"	f
multiplicand	symbol-deriv.scm	/^(define (multiplicand e) (cadr (cdr e)))$/;"	f
multiplier	symbol-deriv.scm	/^(define (multiplier e) (car (cdr e)))$/;"	f
no-more?	prac2_19.scm	/^(define (no-more? coins) $/;"	f
normalize	ration.scm	/^(define (normalize x)$/;"	f
numer	ration.scm	/^(define (numer x) (car x))$/;"	f
one	prac2_6.scm	/^(define one (lambda (f) ((add-1 zero) f)))$/;"	f
one-through-four	list.scm	/^(define one-through-four (list 1 2 3 4))$/;"	f
one-through-four	prac2_18.scm	/^(define one-through-four (list 1 2 3 4))$/;"	f
p2q3	prac2_5.scm	/^(define p2q3 (construct 2 3))$/;"	f
permutation	permutation.scm	/^(define (permutation s)$/;"	f
prime-sum-pairs	flatmap.scm	/^(define (prime-sum-pairs n)$/;"	f
prime-sum-pairs	prac2_40.scm	/^(define (prime-sum-pairs n)$/;"	f
prime-sum?	flatmap.scm	/^(define (prime-sum? pair)$/;"	f
prime-sum?	prac2_40.scm	/^(define (prime-sum? pair)$/;"	f
prime?	flatmap.scm	/^(define (prime? a)$/;"	f
prime?	prac2_40.scm	/^(define (prime? a)$/;"	f
print-rat	ration.scm	/^(define (print-rat x) $/;"	f
product?	symbol-deriv.scm	/^(define (product? e) (and (pair? e) (eq? '* (car e))))$/;"	f
queen-collision?	prac2_42.scm	/^(define (queen-collision? q1 q2)$/;"	f
queens	prac2_42.scm	/^(define (queens board-size)$/;"	f
remove-custom	permutation.scm	/^(define (remove-custom item seq)$/;"	f
reverse-custom	prac2_18.scm	/^(define (reverse-custom items)$/;"	f
reverse1	prac2_39.scm	/^(define (reverse1 sequence)$/;"	f
reverse2	prac2_39.scm	/^(define (reverse2 sequence)$/;"	f
right	prac2_29.scm	/^(define right (make-branch 3 4))$/;"	f
right-branch	prac2_29.scm	/^(define (right-branch x)$/;"	f
safe?	prac2_42.scm	/^(define (safe? col positions) $/;"	f
same-parity	prac2_20.scm	/^(define (same-parity x . y)$/;"	f
same-variable?	symbol-deriv.scm	/^(define (same-variable? v1 v2) (and (variable? v1) (variable? v2) (eq? v1 v2)))$/;"	f
square	enumerate.scm	/^(define (square x) (* x x))$/;"	f
square	prac2_21.scm	/^(define (square x) (* x x))$/;"	f
square	prac2_31.scm	/^(define (square x) (* x x))$/;"	f
square	prac2_33.scm	/^(define (square x) (* x x))$/;"	f
square-list	prac2_21.scm	/^(define (square-list items)$/;"	f
square-list2	prac2_21.scm	/^(define (square-list2 items)$/;"	f
square-tree	prac2_30.scm	/^(define (square-tree tree)$/;"	f
square-tree	prac2_31.scm	/^(define (square-tree tree) (tree-map square tree))$/;"	f
square-tree2	prac2_30.scm	/^(define (square-tree2 tree)$/;"	f
squares	list.scm	/^(define squares (list 1 4 9 16 25))$/;"	f
squares	prac2_17.scm	/^(define squares (list 1 4 9 16 25))$/;"	f
squares	prac2_18.scm	/^(define squares (list 1 4 9 16 25))$/;"	f
sub-rat	ration.scm	/^(define (sub-rat x y)$/;"	f
subsets	prac2_32.scm	/^(define (subsets s)$/;"	f
sum-odd-square-tree	enumerate.scm	/^(define (sum-odd-square-tree tree)$/;"	f
sum?	symbol-deriv.scm	/^(define (sum? e) (and (pair? e) (eq? '+ (car e))))$/;"	f
three	prac2_6.scm	/^(define three (lambda (f) ((add-1 two) f)))$/;"	f
transpose	prac2_37.scm	/^(define (transpose mat)$/;"	f
tree	count_leaves.scm	/^(define tree (cons (list 1 2) (list 3 4)))$/;"	f
tree	prac2_24.scm	/^(define tree (list 1 (list 2 (list 3 4))))$/;"	f
tree-map	prac2_31.scm	/^(define (tree-map f x)$/;"	f
tree1	prac2_25.scm	/^(define tree1 (list 1 3 (list 5 7) 9))$/;"	f
tree2	prac2_25.scm	/^(define tree2 (list (list 7)))$/;"	f
tree3	prac2_25.scm	/^(define tree3 (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))$/;"	f
two	prac2_6.scm	/^(define two (lambda (f) ((add-1 one) f)))$/;"	f
uniq-pairs	prac2_40.scm	/^(define (uniq-pairs n)$/;"	f
us-coins	prac2_19.scm	/^(define us-coins (list 50 25 10 5 1))$/;"	f
variable?	symbol-deriv.scm	/^(define (variable? e) (symbol? e))$/;"	f
x	accumulate.scm	/^(define x (list 1 2 3 4 5))$/;"	f
x	enumerate.scm	/^(define x (list 1 (list 2 (list 3 (list 4 5) (list 6 7 8 9)))))$/;"	f
x	prac2_26.scm	/^(define x (list 1 2 3))$/;"	f
x	prac2_27.scm	/^(define x (list (list 1 2) (list 3 4 (list 5 6))))$/;"	f
x	prac2_28.scm	/^(define x (list 1 2 (list 3 4 (list 5 6 (list 7 8)))))$/;"	f
x	prac2_30.scm	/^(define x (list 1 (list 2 (list 3 4) 5)))$/;"	f
x	prac2_31.scm	/^(define x (list 1 (list 2 (list 3 4) (list 5))))$/;"	f
x	prac2_32.scm	/^(define x (list 1 2 3 4 5))$/;"	f
x	prac2_35.scm	/^(define x (list 1 (list 2 (list 3 4 (list 5 6 (list 7 8 (list 10 9 11 32)))))))$/;"	f
x	prac2_36.scm	/^(define x (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))$/;"	f
x	prac2_41.scm	/^(define x (cons 1 2))$/;"	f
y	prac2_26.scm	/^(define y (list 4 5 6))$/;"	f
y	prac2_30.scm	/^(define y (list 1 2 3 4 5))$/;"	f
y	prac2_41.scm	/^(define y (list 1 2))$/;"	f
zero	prac2_6.scm	/^(define zero (lambda (f) (lambda (x) x)))$/;"	f
